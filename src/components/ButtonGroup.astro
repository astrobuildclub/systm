---
// Imports
import { combineClasses } from "../lib/utils";

// Type Definitions
interface Props {
  shadow?: Boolean;
  shape?: "square" | "rounded" | "pill";
}

// Destructure Props
const { shadow, shape = "rounded" } = Astro.props;

// Set variables
const shadowClass = shadow ? "has-shadow" : " ";
const shapeClassPrefix = shape ? "btn-" : "";
const classes = combineClasses([
  "btn-group",
  shadowClass,
  `${shapeClassPrefix}${shape}`,
]);
---

<div class={classes} role="group">
  <slot />
</div>

<style is:global>
  :root {
    --radius-default: 0.25rem;
    --radius-full: 999rem;

    --shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --offset-shadow: 0 0 #0000;
    --shadow-colored: 0 1px 2px 0 var(--shadow-color);
  }
  .btn-group {
    display: inline-flex;
    gap: 1px;
  }
  .btn-group > * {
    border-radius: 0 !important;
  }
  /* Shape */
  .btn-group.btn-square > *:first-child {
    border-radius: 0 !important;
  }
  .btn-group.btn-square > *:last-child {
    border-radius: 0 !important;
  }

  .btn-group.btn-rounded > *:first-child {
    border-top-left-radius: var(--radius-default) !important;
    border-bottom-left-radius: var(--radius-default) !important;
  }
  .btn-group.btn-rounded > *:last-child {
    border-top-right-radius: var(--radius-default) !important;
    border-bottom-right-radius: var(--radius-default) !important;
  }

  .btn-group.btn-pill > *:first-child {
    border-top-left-radius: var(--radius-full) !important;
    border-bottom-left-radius: var(--radius-full) !important;
  }
  .btn-group.btn-pill > *:last-child {
    border-top-right-radius: var(--radius-full) !important;
    border-bottom-right-radius: var(--radius-full) !important;
  }
  .btn-group.has-shadow {
    box-shadow: var(--offset-shadow, 0 0 #0000), var(--shadow, 0 0 #0000),
      var(--shadow);
  }
  .btn-group.btn-rounded.has-shadow {
    border-radius: var(--radius-default) !important;
  }
  .btn-group.btn-pill.has-shadow {
    border-radius: var(--radius-full) !important;
  }
</style>
